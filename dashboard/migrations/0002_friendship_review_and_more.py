# Generated by Django 4.2.8 on 2023-12-24 16:15

import dashboard.models.abstract.queryset
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import djangofoundry.mixins.hookable
import djangofoundry.models.fields.char
import djangofoundry.models.fields.date
import djangofoundry.models.fields.number
import djangofoundry.models.fields.relationships
import djangofoundry.models.manager


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("dashboard", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Friendship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
            ],
            options={
                "db_table": "dashboard_friendships",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("rating", djangofoundry.models.fields.number.IntegerField()),
                ("review", djangofoundry.models.fields.char.TextField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.RemoveIndex(
            model_name="location",
            name="dashboard_l_icon_9ef8bc_idx",
        ),
        migrations.RemoveField(
            model_name="location",
            name="icon",
        ),
        migrations.AlterField(
            model_name="category",
            name="icon",
            field=djangofoundry.models.fields.char.CharField(
                choices=[
                    ("church", "church"),
                    ("factory", "factory"),
                    ("home", "home"),
                    ("hospital", "hospital"),
                    ("school", "school"),
                    ("warehouse", "warehouse"),
                    ("office_building", "office_building"),
                    ("shopping_mall", "shopping_mall"),
                    ("hotel", "hotel"),
                    ("stadium", "stadium"),
                ],
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="categories",
            field=djangofoundry.models.fields.relationships.ManyToManyField(
                to="dashboard.category"
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="last_visited",
            field=djangofoundry.models.fields.date.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="location",
            name="priority",
            field=djangofoundry.models.fields.number.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="location",
            name="status",
            field=djangofoundry.models.fields.number.IntegerField(
                choices=[("1", "Visited"), ("2", "Wish To Visit")], default="2"
            ),
        ),
        migrations.AlterField(
            model_name="location",
            name="tags",
            field=djangofoundry.models.fields.relationships.ManyToManyField(
                blank=True, to="dashboard.tag"
            ),
        ),
        migrations.AddField(
            model_name="review",
            name="location",
            field=djangofoundry.models.fields.relationships.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="dashboard.location"
            ),
        ),
        migrations.AddField(
            model_name="review",
            name="user",
            field=djangofoundry.models.fields.relationships.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="friendship",
            name="friend",
            field=djangofoundry.models.fields.relationships.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="friend",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="friendship",
            name="user",
            field=djangofoundry.models.fields.relationships.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="user",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="review",
            unique_together={("user", "location")},
        ),
        migrations.AlterUniqueTogether(
            name="friendship",
            unique_together={("user", "friend")},
        ),
    ]
