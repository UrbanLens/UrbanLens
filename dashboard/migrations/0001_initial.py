# Generated by Django 4.2.2 on 2023-10-30 01:07

import dashboard.models.abstract.queryset
import dashboard.models.locations.queryset
import dashboard.models.notifications.queryset
import dashboard.models.profile.queryset
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import djangofoundry.mixins.hookable
import djangofoundry.models.fields.char
import djangofoundry.models.fields.date
import djangofoundry.models.fields.number
import djangofoundry.models.fields.objects
import djangofoundry.models.fields.relationships
import djangofoundry.models.manager


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("name", djangofoundry.models.fields.char.CharField(max_length=255)),
                ("icon", djangofoundry.models.fields.char.CharField(max_length=255)),
            ],
            options={
                "db_table": "dashboard_categories",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("name", djangofoundry.models.fields.char.CharField(max_length=255)),
            ],
            options={
                "db_table": "dashboard_tags",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("avatar", models.ImageField(upload_to="")),
                (
                    "instagram",
                    djangofoundry.models.fields.char.CharField(
                        blank=True, max_length=255, null=True
                    ),
                ),
                (
                    "discord",
                    djangofoundry.models.fields.char.CharField(
                        blank=True, max_length=255, null=True
                    ),
                ),
                (
                    "user",
                    djangofoundry.models.fields.relationships.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_profiles",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.profile.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="NotificationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                (
                    "status",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("read", "Notifcation is unread: has not been seen."),
                            ("unread", "Notifcaiton has been seen."),
                            ("dismissed", "Notification was dismissed."),
                        ],
                        default="read",
                        max_length=17,
                    ),
                ),
                (
                    "importance",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("lowest", "Lowest"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="lowest",
                        max_length=17,
                    ),
                ),
                (
                    "notificaiton_type",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("error", "Error"),
                            ("warning", "Warning"),
                            ("info", "Info"),
                        ],
                        default="error",
                        max_length=17,
                    ),
                ),
                (
                    "message",
                    djangofoundry.models.fields.char.CharField(
                        blank=True, max_length=50000
                    ),
                ),
                (
                    "reference_model",
                    djangofoundry.models.fields.objects.PickledObjectField(
                        editable=False
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_notifications",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
                "indexes": [
                    models.Index(
                        fields=["status"], name="dashboard_n_status_ff9f27_idx"
                    ),
                    models.Index(
                        fields=["importance"], name="dashboard_n_importa_7c7684_idx"
                    ),
                    models.Index(
                        fields=["notificaiton_type"],
                        name="dashboard_n_notific_045386_idx",
                    ),
                ],
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.notifications.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("name", djangofoundry.models.fields.char.CharField(max_length=255)),
                ("icon", djangofoundry.models.fields.char.CharField(max_length=255)),
                (
                    "description",
                    djangofoundry.models.fields.char.CharField(
                        blank=True, max_length=500, null=True
                    ),
                ),
                ("priority", models.IntegerField()),
                ("last_visited", models.DateTimeField(blank=True, null=True)),
                (
                    "latitude",
                    djangofoundry.models.fields.number.DecimalField(
                        decimal_places=6, max_digits=9
                    ),
                ),
                (
                    "longitude",
                    djangofoundry.models.fields.number.DecimalField(
                        decimal_places=6, max_digits=9
                    ),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(1, "Visited"), (2, "Wish to Visit")], default=2
                    ),
                ),
                ("categories", models.ManyToManyField(to="dashboard.category")),
                (
                    "profile",
                    djangofoundry.models.fields.relationships.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="dashboard.profile",
                    ),
                ),
                ("tags", models.ManyToManyField(blank=True, to="dashboard.tag")),
            ],
            options={
                "db_table": "dashboard_locations",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.locations.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("image", models.ImageField(upload_to="")),
                (
                    "location",
                    djangofoundry.models.fields.relationships.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="dashboard.location",
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_images",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
                ("text", djangofoundry.models.fields.char.CharField(max_length=500)),
                (
                    "location",
                    djangofoundry.models.fields.relationships.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="dashboard.location",
                    ),
                ),
                (
                    "profile",
                    djangofoundry.models.fields.relationships.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="dashboard.profile",
                    ),
                ),
            ],
            options={
                "db_table": "dashboard_comments",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.abstract.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name="profile",
            index=models.Index(fields=["user"], name="dashboard_p_user_id_eb17ed_idx"),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(fields=["name"], name="dashboard_l_name_11ee30_idx"),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(fields=["icon"], name="dashboard_l_icon_9ef8bc_idx"),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["priority"], name="dashboard_l_priorit_4ab683_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["last_visited"], name="dashboard_l_last_vi_f65ca3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["latitude", "longitude"], name="dashboard_l_latitud_ce2d4e_idx"
            ),
        ),
    ]
