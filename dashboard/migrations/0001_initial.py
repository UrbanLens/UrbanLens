# Generated by Django 4.2.5 on 2023-09-26 19:18

import dashboard.models.notifications.queryset
from django.db import migrations, models
import django.db.models.manager
import djangofoundry.mixins.hookable
import djangofoundry.models.fields.char
import djangofoundry.models.fields.date
import djangofoundry.models.fields.objects
import djangofoundry.models.manager


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="NotificationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("read", "Notifcation is unread: has not been seen."),
                            ("unread", "Notifcaiton has been seen."),
                            ("dismissed", "Notification was dismissed."),
                        ],
                        default="read",
                        max_length=17,
                    ),
                ),
                (
                    "importance",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("lowest", "Lowest"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="lowest",
                        max_length=17,
                    ),
                ),
                (
                    "notificaiton_type",
                    djangofoundry.models.fields.char.CharField(
                        choices=[
                            ("error", "Error"),
                            ("warning", "Warning"),
                            ("info", "Info"),
                        ],
                        default="error",
                        max_length=17,
                    ),
                ),
                (
                    "message",
                    djangofoundry.models.fields.char.CharField(
                        blank=True, max_length=50000
                    ),
                ),
                (
                    "reference_model",
                    djangofoundry.models.fields.objects.PickledObjectField(
                        editable=False
                    ),
                ),
                (
                    "created",
                    djangofoundry.models.fields.date.InsertedNowField(
                        auto_now_add=True
                    ),
                ),
                (
                    "updated",
                    djangofoundry.models.fields.date.UpdatedNowField(auto_now=True),
                ),
            ],
            options={
                "db_table": "dashboard_notifications",
                "get_latest_by": "updated",
                "abstract": False,
                "base_manager_name": "prefetch_manager",
                "indexes": [
                    models.Index(
                        fields=["status"], name="dashboard_n_status_ff9f27_idx"
                    ),
                    models.Index(
                        fields=["importance"], name="dashboard_n_importa_7c7684_idx"
                    ),
                    models.Index(
                        fields=["notificaiton_type"],
                        name="dashboard_n_notific_045386_idx",
                    ),
                ],
            },
            bases=(models.Model, djangofoundry.mixins.hookable.Hookable),
            managers=[
                ("objects", dashboard.models.notifications.queryset.Manager()),
                ("postgres", djangofoundry.models.manager.PostgresManager()),
                ("prefetch_manager", django.db.models.manager.Manager()),
            ],
        ),
    ]
